import tkinter as tk
from functools import partial
root = tk.Tk()
root.title('Question Portal')
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()
root.geometry(f'{screen_width}x{screen_height-80}+0+0')
root.configure(bg = 'White')
quesFrame = tk.Frame(root, bg = 'White')
quesFrame.place(x = 10, y = 10)
selectFrame = tk.Frame(root, bg = 'Light blue')
selectFrame.pack(anchor = 'e', pady = 10)
tk.Label(selectFrame, justify = tk.CENTER, font = 'Arial 14 bold',
         text = 'Select the Question', padx = 20,  bg = 'Blue') \
    .grid(row = 0, pady = 10, columnspan = 4)
buttonFrame = tk.Frame(root, bg = 'White')
buttonFrame.place(anchor =  'sw', y = screen_height - 300)

opNo = tk.IntVar()
correctAns = 0
opNo.set(0)
option = 0
quesDict = {}
quesNo = 1
answer = 0
r = 1
c = 0
l = [1]
answeredNo = 0

f = open('QuestionPortal.csv')
data = f.readline().split(',')

def askQuestion(count):    
    global l, option, quesNo, ques, option1, option2, option4, correctAns
    opNo.set(quesDict[count]['Option'])
    quesNo = count
    if count != 1:
        btnPrev.config(state = tk.NORMAL)
    else:
        btnPrev.config(state = tk.DISABLED)
    if count == selQueNo:
        btnNext.config(state = tk.DISABLED)
    else:
        btnNext.config(state = tk.NORMAL)
    ques.configure(text = f'Q{count}. {quesDict[count]["Question"]}')
    option1.configure(text = quesDict[count]['Option 1'])
    option2.configure(text = quesDict[count]['Option 2'])
    option3.configure(text = quesDict[count]['Option 3'])
    option4.configure(text = quesDict[count]['Option 4'])

def answerQues(count):
    global quesDict, answer, correctAns, answeredNo
    answer = quesDict[count]['Answer']
    if quesDict[count]['Option'] == answer:
        correctAns += 1
        quesDict[count]['Answered'] = True
    else:
        quesDict[count]['Answered'] = False
    print(f"Question No :: {count}, Option :: {quesDict[count]['Option']}, \
            Answer :: {answer}, Correct Answer :: {correctAns}, \
            Answered Question :: {answeredNo}")

def nextQues():
    answerQues(quesNo)
    askQuestion(quesNo + 1)

def prevQues():
    answerQues(quesNo)
    askQuestion(quesNo - 1)

def selectQues(count):
    answerQues(quesNo)
    askQuestion(count)

for data in f:
    q = data.split(',')
    selQueNo = int(q[0])
    quesDict[selQueNo] = {'Question' : q[1], 'Option 1' : q[2],
                          'Option 2' : q[3], 'Option 3' : q[4],
                          'Option 4' : q[5], 'Answer' : int(q[6]),
                          'Option' : 0, 'Answered' : False}
    selectButton = tk.Button(selectFrame, text = f'{selQueNo}', bg = 'White',
                             command = partial(selectQues, selQueNo),
                             fg = 'Black', pady = 10,
                             padx = 10)
    selectButton.grid(row = r, column = c , padx = 20, pady = 10)
    if c == 3:
        r += 1
        c = 0
    else:
        c += 1

def selectOption():
    global option, quesDict, correctAns
    quesDict[quesNo]['Option'] = opNo.get()
    if quesDict[quesNo]['Answered'] == True:
        correctAns -= 1

ques = tk.Label(quesFrame, justify = tk.LEFT, font = 'Times 12 bold',
                text= f"Q{quesNo}. {quesDict[quesNo]['Question']}",
                bg = 'white')
option1 = tk.Radiobutton(quesFrame, padx= 20, justify = tk.LEFT, value = 1,
                         text = quesDict[quesNo]['Option 1'], bg = 'White',
                         variable = opNo, font = 'Times 12',
                         command = selectOption)
option2 = tk.Radiobutton(quesFrame, padx= 20, justify = tk.LEFT, value = 2,
                         text = quesDict[quesNo]['Option 2'], variable = opNo,
                         font = 'Times 12', bg = 'White',
                         command = selectOption)
option3 = tk.Radiobutton(quesFrame, padx= 20, justify = tk.LEFT, value = 3,
                         text = quesDict[quesNo]['Option 3'], variable = opNo,
                         font = 'Times 12', bg = 'White',
                         command = selectOption)
option4 = tk.Radiobutton(quesFrame, padx= 20, justify = tk.LEFT, value = 4,
                         text = quesDict[quesNo]['Option 4'], variable = opNo,
                         font = 'Times 12', bg = 'White',
                         command = selectOption)

ques.pack(anchor = tk.W)
option1.pack(anchor = tk.W)
option2.pack(anchor = tk.W)
option3.pack(anchor = tk.W)
option4.pack(anchor = tk.W)

def submitPaper():
    global answeredNo
    for x in quesDict:
        if quesDict[x]['Option'] != 0:
            answeredNo += 1
    print(answeredNo)
    answerQues(quesNo)
    tk.Label(text= f'Total Questions : {selQueNo}', justify = tk.CENTER,
             font = 'Times 18 bold').pack()
    tk.Label(text= f'Total Answer the Question : {answeredNo}',
             justify = tk.CENTER, font = 'Times 18 bold').pack()
    tk.Label(text= f'Total Score : {correctAns} !!!', justify = tk.CENTER,
             font = 'Times 18 bold').pack()
    quesFrame.destroy()
    buttonFrame.destroy()
    selectFrame.destroy()

def clearOption():
    global correctAns, quesDict, answeredNo
    opNo.set(0)
    quesDict[quesNo]['Option'] = opNo.get()

btnPrev = tk.Button(buttonFrame, text = 'Previous', command = prevQues,
                    fg = 'White', padx=10, pady = 10, bg = 'Green',
                    state = tk.DISABLED)
btnPrev.pack(side = 'left', padx = 20)
btnNext = tk.Button(buttonFrame, text = f'Next', command = nextQues,
                    fg = 'White', padx=10, pady=10, bg = 'Green')

btnNext.pack(side = 'left', padx = 20)
btnClear = tk.Button(buttonFrame, text = 'Clear', command = clearOption,
                     fg = 'White', padx=10, pady=10, bg = 'Green')
btnClear.pack(side = 'left', padx = 20)
btnSubmit = tk.Button(buttonFrame, text = 'Submit', command = submitPaper,
                      fg = 'White', padx=10, pady=10, bg = 'Green')
btnSubmit.pack(side = 'left', padx = 20)

root.mainloop()
